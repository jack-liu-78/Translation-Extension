{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","text","data","lang","handleSubmit","bind","handleTextChange","handleLangChange","className","onSubmit","this","id","value","onChange","translated","e","setState","target","chrome","storage","local","set","preventDefault","url","encodeURI","fetch","then","response","json","result","i","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAkEeA,E,kDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAMF,EAAMG,KAAKD,KAAME,KAAMJ,EAAMG,KAAKC,MACvD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBALP,E,0CAQnB,WACE,OACE,qBAAKG,UAAU,iBAAf,SACE,uBAAMC,SAAUC,KAAKN,aAArB,UACE,uBACEO,GAAG,WACHC,MAAOF,KAAKV,MAAMC,KAClBY,SAAUH,KAAKJ,mBAEjB,+CAGA,6CAEA,yBAAQM,MAAOF,KAAKV,MAAMG,KAAMU,SAAUH,KAAKH,iBAA/C,UACE,wBAAQK,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,KAAd,wCAGF,6BAAKF,KAAKV,MAAMc,oB,8BAMxB,SAAiBC,GACfL,KAAKM,SAAS,CAAEf,KAAMc,EAAEE,OAAOL,QAC/BM,OAAOC,QAAQC,MAAMC,IAAI,CAACpB,KAAMc,EAAEE,OAAOL,U,8BAE3C,SAAiBG,GACfL,KAAKM,SAAS,CAAEb,KAAMY,EAAEE,OAAOL,QAC/BM,OAAOC,QAAQC,MAAMC,IAAI,CAAClB,KAAMY,EAAEE,OAAOL,U,0BAG3C,SAAaG,GAAI,IAAD,OACdA,EAAEO,iBAEF,IAAIC,EAAM,6EAA+Eb,KAAKV,MAAMG,KAAO,WAAaqB,UAAUd,KAAKV,MAAMC,MAC7IwB,MAAMF,GACDG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxB,GAEJ,IADA,IAAI2B,EAAS,GACJC,EAAI,EAAGA,EAAI5B,EAAK,GAAG6B,OAAQD,IAClCD,GAAU3B,EAAK,GAAG4B,GAAG,GACrB,EAAKd,SAAS,CAAEF,WAAYe,W,GAtDtBG,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdjB,OAAOC,QAAQC,MAAMsB,IAAI,MAAM,SAAUxC,GACvCyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK3C,KAAMA,MAEb4C,SAASC,eAAe,YAc5Bb,M","file":"static/js/main.5277ed4e.chunk.js","sourcesContent":["/* global chrome */\nimport './App.css';\nimport React from 'react';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: props.data.text, lang: props.data.lang };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleLangChange = this.handleLangChange.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"Main-Container\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            id=\"new-todo\"\n            value={this.state.text}\n            onChange={this.handleTextChange}\n          />\n          <button>\n            Translate\n          </button>\n          <label>\n          Language\n          <select value={this.state.lang} onChange={this.handleLangChange}>\n            <option value=\"en\">English</option>\n            <option value=\"ko\">Korean</option>\n            <option value=\"zh\">Chinese (Simplified)</option>\n          </select>\n        </label>\n          <h3>{this.state.translated}</h3>\n        </form>\n      </div>\n    );\n  }\n\n  handleTextChange(e) {\n    this.setState({ text: e.target.value });\n    chrome.storage.local.set({text: e.target.value});\n  }\n  handleLangChange(e) {\n    this.setState({ lang: e.target.value });\n    chrome.storage.local.set({lang: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    var url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=\" + this.state.lang + \"&dt=t&q=\" + encodeURI(this.state.text);\n    fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          var result = \"\";\n          for (var i = 0; i < data[0].length; i++) {\n            result += data[0][i][0];          \n            this.setState({ translated: result})\n        }\n      });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* global chrome */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nchrome.storage.local.get(null, function (data) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App data={data}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n});\n\n// var data = {text:\"hi\", lang:\"en\"};\n// ReactDOM.render(\n//       <React.StrictMode>\n//         <App data={data}/>\n//       </React.StrictMode>,\n//       document.getElementById('root')\n//     );\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}